{"ast":null,"code":"import axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:5000/api/';\n\nconst responseBody = response => response.data;\n\naxios.interceptors.response.use(response => {\n  return response;\n}, erroe => {});\nconst requests = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  delete: url => axios.delete(url).then(responseBody)\n};\nconst Catalog = {\n  list: () => requests.get('products'),\n  details: id => requests.get(`products/${id}`)\n};\nconst TestErrors = {\n  get400Error: () => requests.get('buggy/bad-request'),\n  get401Error: () => requests.get('buggy/unauthorized'),\n  get404Error: () => requests.get('buggy/not-found'),\n  get500Error: () => requests.get('buggy/server-error'),\n  getValidationError: () => requests.get('buggy/validation-error')\n};\nconst Agent = {\n  Catalog,\n  TestErrors\n};\nexport default Agent;","map":{"version":3,"names":["axios","defaults","baseURL","responseBody","response","data","interceptors","use","erroe","requests","get","url","then","post","body","put","delete","Catalog","list","details","id","TestErrors","get400Error","get401Error","get404Error","get500Error","getValidationError","Agent"],"sources":["D:/Project/client/src/App/Api/Agent.ts"],"sourcesContent":["import  axios, { AxiosError, AxiosResponse }  from 'axios';\r\n\r\naxios.defaults.baseURL  = 'http://localhost:5000/api/';\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\naxios.interceptors.response.use(response => {\r\n    return response;\r\n}, (erroe:AxiosError) => {\r\n    \r\n});\r\n\r\nconst requests = {\r\n    get: (url:string) => axios.get(url).then(responseBody),\r\n    post: (url:string, body:{}) => axios.post(url, body).then(responseBody),\r\n    put: (url:string, body:{}) => axios.put(url, body).then(responseBody),\r\n   delete: (url:string) => axios.delete(url).then(responseBody),\r\n\r\n}\r\n\r\nconst Catalog = {\r\n    list: () => requests.get('products'),\r\n    details: (id: number) => requests.get(`products/${id}`)\r\n}\r\n\r\nconst TestErrors = {\r\n    get400Error:() => requests.get('buggy/bad-request'),\r\n    get401Error:() => requests.get('buggy/unauthorized'),\r\n    get404Error:() => requests.get('buggy/not-found'),\r\n    get500Error:() => requests.get('buggy/server-error'),\r\n    getValidationError:() => requests.get('buggy/validation-error'),\r\n}\r\n\r\nconst Agent = {\r\n    Catalog,\r\n    TestErrors\r\n}\r\n\r\nexport default Agent;"],"mappings":"AAAA,OAAQA,KAAR,MAAmD,OAAnD;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAA0B,4BAA1B;;AAEA,MAAMC,YAAY,GAAIC,QAAD,IAA6BA,QAAQ,CAACC,IAA3D;;AAEAL,KAAK,CAACM,YAAN,CAAmBF,QAAnB,CAA4BG,GAA5B,CAAgCH,QAAQ,IAAI;EACxC,OAAOA,QAAP;AACH,CAFD,EAEII,KAAD,IAAsB,CAExB,CAJD;AAMA,MAAMC,QAAQ,GAAG;EACbC,GAAG,EAAGC,GAAD,IAAgBX,KAAK,CAACU,GAAN,CAAUC,GAAV,EAAeC,IAAf,CAAoBT,YAApB,CADR;EAEbU,IAAI,EAAE,CAACF,GAAD,EAAaG,IAAb,KAAyBd,KAAK,CAACa,IAAN,CAAWF,GAAX,EAAgBG,IAAhB,EAAsBF,IAAtB,CAA2BT,YAA3B,CAFlB;EAGbY,GAAG,EAAE,CAACJ,GAAD,EAAaG,IAAb,KAAyBd,KAAK,CAACe,GAAN,CAAUJ,GAAV,EAAeG,IAAf,EAAqBF,IAArB,CAA0BT,YAA1B,CAHjB;EAIda,MAAM,EAAGL,GAAD,IAAgBX,KAAK,CAACgB,MAAN,CAAaL,GAAb,EAAkBC,IAAlB,CAAuBT,YAAvB;AAJV,CAAjB;AAQA,MAAMc,OAAO,GAAG;EACZC,IAAI,EAAE,MAAMT,QAAQ,CAACC,GAAT,CAAa,UAAb,CADA;EAEZS,OAAO,EAAGC,EAAD,IAAgBX,QAAQ,CAACC,GAAT,CAAc,YAAWU,EAAG,EAA5B;AAFb,CAAhB;AAKA,MAAMC,UAAU,GAAG;EACfC,WAAW,EAAC,MAAMb,QAAQ,CAACC,GAAT,CAAa,mBAAb,CADH;EAEfa,WAAW,EAAC,MAAMd,QAAQ,CAACC,GAAT,CAAa,oBAAb,CAFH;EAGfc,WAAW,EAAC,MAAMf,QAAQ,CAACC,GAAT,CAAa,iBAAb,CAHH;EAIfe,WAAW,EAAC,MAAMhB,QAAQ,CAACC,GAAT,CAAa,oBAAb,CAJH;EAKfgB,kBAAkB,EAAC,MAAMjB,QAAQ,CAACC,GAAT,CAAa,wBAAb;AALV,CAAnB;AAQA,MAAMiB,KAAK,GAAG;EACVV,OADU;EAEVI;AAFU,CAAd;AAKA,eAAeM,KAAf"},"metadata":{},"sourceType":"module"}