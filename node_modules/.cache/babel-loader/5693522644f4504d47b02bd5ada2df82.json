{"ast":null,"code":"import { PaginatedResponse } from './../Models/pagination';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Store } from '../Store/ConfigureStore';\n\nconst sleep = () => new Promise(resolve => setTimeout(resolve, 500));\n\naxios.defaults.baseURL = 'http://localhost:5000/api/';\naxios.defaults.withCredentials = true;\n\nconst responseBody = response => response.data;\n\naxios.interceptors.request.use(config => {\n  var _Store$getState$accou;\n\n  const token = (_Store$getState$accou = Store.getState().account.user) === null || _Store$getState$accou === void 0 ? void 0 : _Store$getState$accou.token;\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\naxios.interceptors.response.use(async response => {\n  await sleep();\n  const pagination = response.headers['pagination'];\n\n  if (pagination) {\n    response.data = new PaginatedResponse(response.data, JSON.parse(pagination));\n    return response;\n  }\n\n  return response;\n}, error => {\n  const {\n    data,\n    status\n  } = error.response;\n\n  switch (status) {\n    case 400:\n      if (data.errors) {\n        const modelStateErrors = [];\n\n        for (const key in data.errors) {\n          if (data.errors[key]) {\n            modelStateErrors.push(data.errors[key]);\n          }\n        }\n\n        throw modelStateErrors.flat();\n      }\n\n      toast.error(data.title);\n      break;\n\n    case 401:\n      toast.error(data.title);\n      break;\n\n    case 500:\n      history.push({\n        pathname: '/server-error'\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error.response);\n});\nconst requests = {\n  get: (url, params) => axios.get(url, {\n    params\n  }).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  delete: url => axios.delete(url).then(responseBody),\n  postForm: (url, data) => axios.post(url, data, {\n    headers: {\n      'Content-type': 'multipart/form-data'\n    }\n  }).then(responseBody),\n  putForm: (url, data) => axios.put(url, data, {\n    headers: {\n      'Content-type': 'multipart/form-data'\n    }\n  }).then(responseBody)\n};\n\nfunction createFormData(item) {\n  let formData = new FormData();\n\n  for (const key in item) {\n    formData.append(key, item[key]);\n  }\n\n  return formData;\n}\n\nconst Admin = {\n  createProduct: product => requests.post('products', createFormData(product)),\n  updateProduct: product => requests.put('products', createFormData(product)),\n  deleteProduct: id => requests.delete(`products/${id}`)\n};\nconst Catalog = {\n  list: params => requests.get('products', params),\n  details: id => requests.get(`products/${id}`),\n  fetchFilters: () => requests.get('products/filters')\n};\nconst TestErrors = {\n  get400Error: () => requests.get('error/bad-request'),\n  get401Error: () => requests.get('error/unauthorized'),\n  get404Error: () => requests.get('error/not-found'),\n  get500Error: () => requests.get('error/server-error'),\n  getValidationError: () => requests.get('error/validation-error')\n};\nconst Basket = {\n  get: () => requests.get('basket'),\n  addItem: function (productId) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return requests.post(`basket?productId=${productId}&quantity=${quantity}`, {});\n  },\n  removeItem: function (productId) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return requests.delete(`basket?productId=${productId}&quantity=${quantity}`);\n  }\n};\nconst Account = {\n  login: values => requests.post('account/login', values),\n  register: values => requests.post('account/register', values),\n  currentUser: () => requests.get('account/getCurrentUser')\n};\nconst Orders = {\n  list: () => requests.get('orders'),\n  fetch: id => requests.get(`orders/${id}`),\n  create: values => requests.post('orders', values)\n};\nconst Payment = {\n  createPaymentIntent: () => requests.post('payment', {})\n};\nconst Agent = {\n  Catalog,\n  TestErrors,\n  Basket,\n  Account,\n  Orders,\n  Payment,\n  Admin\n};\nexport default Agent;","map":{"version":3,"names":["PaginatedResponse","axios","toast","history","Store","sleep","Promise","resolve","setTimeout","defaults","baseURL","withCredentials","responseBody","response","data","interceptors","request","use","config","token","getState","account","user","headers","Authorization","pagination","JSON","parse","error","status","errors","modelStateErrors","key","push","flat","title","pathname","reject","requests","get","url","params","then","post","body","put","delete","postForm","putForm","createFormData","item","formData","FormData","append","Admin","createProduct","product","updateProduct","deleteProduct","id","Catalog","list","details","fetchFilters","TestErrors","get400Error","get401Error","get404Error","get500Error","getValidationError","Basket","addItem","productId","quantity","removeItem","Account","login","values","register","currentUser","Orders","fetch","create","Payment","createPaymentIntent","Agent"],"sources":["D:/Project/client/src/App/Api/Agent.ts"],"sourcesContent":["import { PaginatedResponse } from './../Models/pagination';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { request } from 'http';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Store } from '../Store/ConfigureStore';\r\n\r\n\r\nconst sleep = () => new Promise(resolve => setTimeout(resolve, 500));\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api/';\r\naxios.defaults.withCredentials = true;\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = Store.getState().account.user?.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    await sleep();\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination) {\r\n        response.data = new PaginatedResponse(response.data, JSON.parse(pagination));\r\n       return response; \r\n    }\r\n\r\n    return response\r\n}, (error: AxiosError) => {\r\n    const { data, status } = error.response!;\r\n\r\n    switch (status) {\r\n        case 400:\r\n            if (data.errors) {\r\n                const modelStateErrors: string[] = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modelStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat();\r\n            }\r\n            toast.error(data.title);\r\n            break;\r\n        case 401:\r\n            toast.error(data.title);\r\n            break;\r\n        case 500:\r\n            history.push({\r\n                pathname: '/server-error'\r\n            });\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return Promise.reject(error.response);\r\n});\r\n\r\nconst requests = {\r\n    get: (url: string, params?:URLSearchParams) => axios.get(url, {params}).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    delete: (url: string) => axios.delete(url).then(responseBody),\r\n    postForm: (url:string, data:FormData) => axios.post(url, data, {\r\n        headers:{'Content-type':'multipart/form-data'}\r\n    }).then(responseBody),\r\n    putForm: (url:string, data:FormData) => axios.put(url, data, {\r\n        headers:{'Content-type':'multipart/form-data'}\r\n    }).then(responseBody)\r\n}\r\n\r\nfunction createFormData(item:any){\r\n    let formData = new FormData();\r\n    for(const key in item){\r\n        formData.append(key, item[key])\r\n    }\r\n    return formData;\r\n}\r\n\r\nconst Admin = {\r\n    createProduct:(product:any) => requests.post('products', createFormData(product)),\r\n    updateProduct:(product:any) => requests.put('products', createFormData(product)),\r\n    deleteProduct:(id:number) => requests.delete(`products/${id}`),\r\n}\r\n\r\nconst Catalog = {\r\n    list: (params:URLSearchParams) => requests.get('products', params),\r\n    details: (id: number) => requests.get(`products/${id}`),\r\n    fetchFilters:() => requests.get('products/filters')\r\n}\r\n\r\nconst TestErrors = {\r\n    get400Error: () => requests.get('error/bad-request'),\r\n    get401Error: () => requests.get('error/unauthorized'),\r\n    get404Error: () => requests.get('error/not-found'),\r\n    get500Error: () => requests.get('error/server-error'),\r\n    getValidationError: () => requests.get('error/validation-error'),\r\n}\r\n\r\nconst Basket = {\r\n    get: () => requests.get('basket'),\r\n    addItem: (productId: number, quantity = 1) => requests.post(`basket?productId=${productId}&quantity=${quantity}`, {}),\r\n    removeItem: (productId: number, quantity = 1) => requests.delete(`basket?productId=${productId}&quantity=${quantity}`),\r\n}\r\n\r\nconst Account = {\r\n    login:(values:any) => requests.post('account/login',values),\r\n    register:(values:any) => requests.post('account/register',values),\r\n    currentUser:() => requests.get('account/getCurrentUser')\r\n}\r\nconst Orders = {\r\n    list:() => requests.get('orders'),\r\n    fetch:(id:number) => requests.get(`orders/${id}`),\r\n    create:(values:any) => requests.post('orders', values)\r\n}\r\n\r\nconst Payment ={\r\n    createPaymentIntent:()=>requests.post('payment',{})\r\n}\r\n\r\nconst Agent = {\r\n    Catalog,\r\n    TestErrors,\r\n    Basket,\r\n    Account,\r\n    Orders,\r\n    Payment,\r\n    Admin\r\n}\r\n\r\nexport default Agent;"],"mappings":"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"},"metadata":{},"sourceType":"module"}