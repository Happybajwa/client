{"ast":null,"code":"import axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\naxios.defaults.baseURL = 'http://localhost:5000/api/';\n\nconst responseBody = response => response.data;\n\nconst navigate = useNavigate();\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  const {\n    data,\n    status\n  } = error.response;\n\n  switch (status) {\n    case 400:\n      if (data.errors) {\n        const modelStateErrors = [];\n\n        for (const key in data.errors) {\n          if (data.errors[key]) {\n            modelStateErrors.push(data.errors[key]);\n          }\n        }\n\n        throw modelStateErrors.flat();\n      }\n\n      toast.error(data.title);\n      break;\n\n    case 401:\n      toast.error(data.title);\n      break;\n\n    case 500:\n      navigate('/server-error', error);\n      break;\n\n    default:\n      break;\n  }\n\n  return Promise.reject(error.response);\n});\nconst requests = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  delete: url => axios.delete(url).then(responseBody)\n};\nconst Catalog = {\n  list: () => requests.get('products'),\n  details: id => requests.get(`products/${id}`)\n};\nconst TestErrors = {\n  get400Error: () => requests.get('buggy/bad-request'),\n  get401Error: () => requests.get('buggy/unauthorized'),\n  get404Error: () => requests.get('buggy/not-found'),\n  get500Error: () => requests.get('buggy/server-error'),\n  getValidationError: () => requests.get('buggy/validation-error')\n};\nconst Agent = {\n  Catalog,\n  TestErrors\n};\nexport default Agent;","map":{"version":3,"names":["axios","useNavigate","toast","defaults","baseURL","responseBody","response","data","navigate","interceptors","use","error","status","errors","modelStateErrors","key","push","flat","title","Promise","reject","requests","get","url","then","post","body","put","delete","Catalog","list","details","id","TestErrors","get400Error","get401Error","get404Error","get500Error","getValidationError","Agent"],"sources":["D:/Project/client/src/App/Api/Agent.ts"],"sourcesContent":["import  axios, { AxiosError, AxiosResponse }  from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\n\r\naxios.defaults.baseURL  = 'http://localhost:5000/api/';\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst navigate = useNavigate();\r\n\r\naxios.interceptors.response.use(response => {\r\n    return response\r\n}, (error:AxiosError) => {\r\n    const {data, status} = error.response!;\r\n\r\n    switch(status){\r\n        case 400:\r\n            if(data.errors){\r\n                const modelStateErrors:string[] =[];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modelStateErrors.push(data.errors[key])\r\n                    }   \r\n                }\r\n                throw modelStateErrors.flat();\r\n            }\r\n        \r\n            toast.error(data.title);\r\n            break;\r\n        case 401:\r\n            toast.error(data.title);\r\n            break;\r\n        case 500:\r\n            navigate('/server-error',error);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return Promise.reject(error.response);\r\n});\r\n\r\nconst requests = {\r\n    get: (url:string) => axios.get(url).then(responseBody),\r\n    post: (url:string, body:{}) => axios.post(url, body).then(responseBody),\r\n    put: (url:string, body:{}) => axios.put(url, body).then(responseBody),\r\n   delete: (url:string) => axios.delete(url).then(responseBody),\r\n}\r\n\r\nconst Catalog = {\r\n    list: () => requests.get('products'),\r\n    details: (id: number) => requests.get(`products/${id}`)\r\n}\r\n\r\nconst TestErrors = {\r\n    get400Error:() => requests.get('buggy/bad-request'),\r\n    get401Error:() => requests.get('buggy/unauthorized'),\r\n    get404Error:() => requests.get('buggy/not-found'),\r\n    get500Error:() => requests.get('buggy/server-error'),\r\n    getValidationError:() => requests.get('buggy/validation-error'),\r\n}\r\n\r\nconst Agent = {\r\n    Catalog,\r\n    TestErrors\r\n}\r\n\r\nexport default Agent;"],"mappings":"AAAA,OAAQA,KAAR,MAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAA0B,4BAA1B;;AAEA,MAAMC,YAAY,GAAIC,QAAD,IAA6BA,QAAQ,CAACC,IAA3D;;AAEA,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEAD,KAAK,CAACS,YAAN,CAAmBH,QAAnB,CAA4BI,GAA5B,CAAgCJ,QAAQ,IAAI;EACxC,OAAOA,QAAP;AACH,CAFD,EAEIK,KAAD,IAAsB;EACrB,MAAM;IAACJ,IAAD;IAAOK;EAAP,IAAiBD,KAAK,CAACL,QAA7B;;EAEA,QAAOM,MAAP;IACI,KAAK,GAAL;MACI,IAAGL,IAAI,CAACM,MAAR,EAAe;QACX,MAAMC,gBAAyB,GAAE,EAAjC;;QACA,KAAI,MAAMC,GAAV,IAAiBR,IAAI,CAACM,MAAtB,EAA6B;UACzB,IAAGN,IAAI,CAACM,MAAL,CAAYE,GAAZ,CAAH,EAAoB;YAChBD,gBAAgB,CAACE,IAAjB,CAAsBT,IAAI,CAACM,MAAL,CAAYE,GAAZ,CAAtB;UACH;QACJ;;QACD,MAAMD,gBAAgB,CAACG,IAAjB,EAAN;MACH;;MAEDf,KAAK,CAACS,KAAN,CAAYJ,IAAI,CAACW,KAAjB;MACA;;IACJ,KAAK,GAAL;MACIhB,KAAK,CAACS,KAAN,CAAYJ,IAAI,CAACW,KAAjB;MACA;;IACJ,KAAK,GAAL;MACIV,QAAQ,CAAC,eAAD,EAAiBG,KAAjB,CAAR;MACA;;IACJ;MACI;EArBR;;EAuBA,OAAOQ,OAAO,CAACC,MAAR,CAAeT,KAAK,CAACL,QAArB,CAAP;AACH,CA7BD;AA+BA,MAAMe,QAAQ,GAAG;EACbC,GAAG,EAAGC,GAAD,IAAgBvB,KAAK,CAACsB,GAAN,CAAUC,GAAV,EAAeC,IAAf,CAAoBnB,YAApB,CADR;EAEboB,IAAI,EAAE,CAACF,GAAD,EAAaG,IAAb,KAAyB1B,KAAK,CAACyB,IAAN,CAAWF,GAAX,EAAgBG,IAAhB,EAAsBF,IAAtB,CAA2BnB,YAA3B,CAFlB;EAGbsB,GAAG,EAAE,CAACJ,GAAD,EAAaG,IAAb,KAAyB1B,KAAK,CAAC2B,GAAN,CAAUJ,GAAV,EAAeG,IAAf,EAAqBF,IAArB,CAA0BnB,YAA1B,CAHjB;EAIduB,MAAM,EAAGL,GAAD,IAAgBvB,KAAK,CAAC4B,MAAN,CAAaL,GAAb,EAAkBC,IAAlB,CAAuBnB,YAAvB;AAJV,CAAjB;AAOA,MAAMwB,OAAO,GAAG;EACZC,IAAI,EAAE,MAAMT,QAAQ,CAACC,GAAT,CAAa,UAAb,CADA;EAEZS,OAAO,EAAGC,EAAD,IAAgBX,QAAQ,CAACC,GAAT,CAAc,YAAWU,EAAG,EAA5B;AAFb,CAAhB;AAKA,MAAMC,UAAU,GAAG;EACfC,WAAW,EAAC,MAAMb,QAAQ,CAACC,GAAT,CAAa,mBAAb,CADH;EAEfa,WAAW,EAAC,MAAMd,QAAQ,CAACC,GAAT,CAAa,oBAAb,CAFH;EAGfc,WAAW,EAAC,MAAMf,QAAQ,CAACC,GAAT,CAAa,iBAAb,CAHH;EAIfe,WAAW,EAAC,MAAMhB,QAAQ,CAACC,GAAT,CAAa,oBAAb,CAJH;EAKfgB,kBAAkB,EAAC,MAAMjB,QAAQ,CAACC,GAAT,CAAa,wBAAb;AALV,CAAnB;AAQA,MAAMiB,KAAK,GAAG;EACVV,OADU;EAEVI;AAFU,CAAd;AAKA,eAAeM,KAAf"},"metadata":{},"sourceType":"module"}