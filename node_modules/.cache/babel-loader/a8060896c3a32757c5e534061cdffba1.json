{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\client\\\\src\\\\App\\\\Components\\\\CheckBoxButtons.tsx\",\n    _s = $RefreshSig$();\n\nimport { Checkbox, FormControlLabel, FormGroup } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckBoxButton(_ref) {\n  _s();\n\n  let {\n    items,\n    checked,\n    onChange\n  } = _ref;\n  const [checkedItems, setCheckedItems] = useState(checked || []);\n\n  function handleChecked(value) {\n    const currentIndex = checkedItems.findIndex(item => item === value);\n    let newChecked = [];\n    if (currentIndex - 1) newChecked = [...checkedItems, value];else newChecked = checkedItems.filter(item => item !== value);\n    setCheckedItems(newChecked);\n    onChange(newChecked);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormGroup, {\n    children: items.map(item => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: checkedItems.indexOf(item)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 20\n      }, this),\n      label: item\n    }, item, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckBoxButton, \"+QPuRRStyzY04ksowBvyasYtCX8=\");\n\n_c = CheckBoxButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckBoxButton\");","map":{"version":3,"names":["Checkbox","FormControlLabel","FormGroup","useState","CheckBoxButton","items","checked","onChange","checkedItems","setCheckedItems","handleChecked","value","currentIndex","findIndex","item","newChecked","filter","map","indexOf"],"sources":["D:/Project/client/src/App/Components/CheckBoxButtons.tsx"],"sourcesContent":["import { Checkbox, FormControlLabel, FormGroup } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\n\r\ninterface Props{\r\n    items:string[];\r\n    checked?:string[];\r\n    onChange:(items:string[]) => void;\r\n}\r\n\r\nexport default function CheckBoxButton({items, checked, onChange}:Props){\r\n\r\n    const [checkedItems, setCheckedItems] = useState(checked || [])\r\n\r\n    function handleChecked(value:string) {\r\n        const currentIndex = checkedItems.findIndex(item => item === value)\r\n        let newChecked: string[] = [];\r\n        if(currentIndex - 1) newChecked= [...checkedItems, value];\r\n        else newChecked = checkedItems.filter(item => item !== value);\r\n        setCheckedItems(newChecked);\r\n        onChange(newChecked);\r\n    }\r\n    return (\r\n        <FormGroup>\r\n        {items.map(item => (\r\n          <FormControlLabel \r\n          control={<Checkbox \r\n            checked={checkedItems.indexOf(item )}\r\n          />} \r\n          label={item} \r\n          key={item} />\r\n        ))}\r\n      </FormGroup>\r\n    )\r\n}"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,gBAAnB,EAAqCC,SAArC,QAAsD,eAAtD;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAQA,eAAe,SAASC,cAAT,OAAyD;EAAA;;EAAA,IAAjC;IAACC,KAAD;IAAQC,OAAR;IAAiBC;EAAjB,CAAiC;EAEpE,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAACG,OAAO,IAAI,EAAZ,CAAhD;;EAEA,SAASI,aAAT,CAAuBC,KAAvB,EAAqC;IACjC,MAAMC,YAAY,GAAGJ,YAAY,CAACK,SAAb,CAAuBC,IAAI,IAAIA,IAAI,KAAKH,KAAxC,CAArB;IACA,IAAII,UAAoB,GAAG,EAA3B;IACA,IAAGH,YAAY,GAAG,CAAlB,EAAqBG,UAAU,GAAE,CAAC,GAAGP,YAAJ,EAAkBG,KAAlB,CAAZ,CAArB,KACKI,UAAU,GAAGP,YAAY,CAACQ,MAAb,CAAoBF,IAAI,IAAIA,IAAI,KAAKH,KAArC,CAAb;IACLF,eAAe,CAACM,UAAD,CAAf;IACAR,QAAQ,CAACQ,UAAD,CAAR;EACH;;EACD,oBACI,QAAC,SAAD;IAAA,UACCV,KAAK,CAACY,GAAN,CAAUH,IAAI,iBACb,QAAC,gBAAD;MACA,OAAO,eAAE,QAAC,QAAD;QACP,OAAO,EAAEN,YAAY,CAACU,OAAb,CAAqBJ,IAArB;MADF;QAAA;QAAA;QAAA;MAAA,QADT;MAIA,KAAK,EAAEA;IAJP,GAKKA,IALL;MAAA;MAAA;MAAA;IAAA,QADD;EADD;IAAA;IAAA;IAAA;EAAA,QADJ;AAYH;;GAxBuBV,c;;KAAAA,c"},"metadata":{},"sourceType":"module"}